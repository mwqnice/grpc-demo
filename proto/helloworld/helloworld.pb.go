// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: helloworld/helloworld.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReqData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ReqData) Reset() {
	*x = ReqData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helloworld_helloworld_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqData) ProtoMessage() {}

func (x *ReqData) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_helloworld_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqData.ProtoReflect.Descriptor instead.
func (*ReqData) Descriptor() ([]byte, []int) {
	return file_helloworld_helloworld_proto_rawDescGZIP(), []int{0}
}

func (x *ReqData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RepData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply string `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
}

func (x *RepData) Reset() {
	*x = RepData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_helloworld_helloworld_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepData) ProtoMessage() {}

func (x *RepData) ProtoReflect() protoreflect.Message {
	mi := &file_helloworld_helloworld_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepData.ProtoReflect.Descriptor instead.
func (*RepData) Descriptor() ([]byte, []int) {
	return file_helloworld_helloworld_proto_rawDescGZIP(), []int{1}
}

func (x *RepData) GetReply() string {
	if x != nil {
		return x.Reply
	}
	return ""
}

var File_helloworld_helloworld_proto protoreflect.FileDescriptor

var file_helloworld_helloworld_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2f, 0x68, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x68,
	0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x22, 0x1d, 0x0a, 0x07, 0x52, 0x65, 0x71,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1f, 0x0a, 0x07, 0x52, 0x65, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x32, 0xf6, 0x01, 0x0a, 0x0a, 0x48, 0x65,
	0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x13, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64,
	0x2e, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x13, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f,
	0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x52, 0x65, 0x70, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12,
	0x39, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x13, 0x2e, 0x68,
	0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74,
	0x61, 0x1a, 0x13, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x52,
	0x65, 0x70, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x30, 0x01, 0x12, 0x39, 0x0a, 0x09, 0x53, 0x65,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x13, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x13, 0x2e, 0x68,
	0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x52, 0x65, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x00, 0x28, 0x01, 0x12, 0x3b, 0x0a, 0x09, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x13, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x2e,
	0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x13, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x2e, 0x52, 0x65, 0x70, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x28, 0x01,
	0x30, 0x01, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_helloworld_helloworld_proto_rawDescOnce sync.Once
	file_helloworld_helloworld_proto_rawDescData = file_helloworld_helloworld_proto_rawDesc
)

func file_helloworld_helloworld_proto_rawDescGZIP() []byte {
	file_helloworld_helloworld_proto_rawDescOnce.Do(func() {
		file_helloworld_helloworld_proto_rawDescData = protoimpl.X.CompressGZIP(file_helloworld_helloworld_proto_rawDescData)
	})
	return file_helloworld_helloworld_proto_rawDescData
}

var file_helloworld_helloworld_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_helloworld_helloworld_proto_goTypes = []interface{}{
	(*ReqData)(nil), // 0: helloworld.ReqData
	(*RepData)(nil), // 1: helloworld.RepData
}
var file_helloworld_helloworld_proto_depIdxs = []int32{
	0, // 0: helloworld.Helloworld.GetData:input_type -> helloworld.ReqData
	0, // 1: helloworld.Helloworld.GetStream:input_type -> helloworld.ReqData
	0, // 2: helloworld.Helloworld.SetStream:input_type -> helloworld.ReqData
	0, // 3: helloworld.Helloworld.AllStream:input_type -> helloworld.ReqData
	1, // 4: helloworld.Helloworld.GetData:output_type -> helloworld.RepData
	1, // 5: helloworld.Helloworld.GetStream:output_type -> helloworld.RepData
	1, // 6: helloworld.Helloworld.SetStream:output_type -> helloworld.RepData
	1, // 7: helloworld.Helloworld.AllStream:output_type -> helloworld.RepData
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_helloworld_helloworld_proto_init() }
func file_helloworld_helloworld_proto_init() {
	if File_helloworld_helloworld_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_helloworld_helloworld_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_helloworld_helloworld_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_helloworld_helloworld_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_helloworld_helloworld_proto_goTypes,
		DependencyIndexes: file_helloworld_helloworld_proto_depIdxs,
		MessageInfos:      file_helloworld_helloworld_proto_msgTypes,
	}.Build()
	File_helloworld_helloworld_proto = out.File
	file_helloworld_helloworld_proto_rawDesc = nil
	file_helloworld_helloworld_proto_goTypes = nil
	file_helloworld_helloworld_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HelloworldClient is the client API for Helloworld service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HelloworldClient interface {
	GetData(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*RepData, error)
	GetStream(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (Helloworld_GetStreamClient, error)
	SetStream(ctx context.Context, opts ...grpc.CallOption) (Helloworld_SetStreamClient, error)
	AllStream(ctx context.Context, opts ...grpc.CallOption) (Helloworld_AllStreamClient, error)
}

type helloworldClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloworldClient(cc grpc.ClientConnInterface) HelloworldClient {
	return &helloworldClient{cc}
}

func (c *helloworldClient) GetData(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (*RepData, error) {
	out := new(RepData)
	err := c.cc.Invoke(ctx, "/helloworld.Helloworld/GetData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloworldClient) GetStream(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (Helloworld_GetStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Helloworld_serviceDesc.Streams[0], "/helloworld.Helloworld/GetStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloworldGetStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Helloworld_GetStreamClient interface {
	Recv() (*RepData, error)
	grpc.ClientStream
}

type helloworldGetStreamClient struct {
	grpc.ClientStream
}

func (x *helloworldGetStreamClient) Recv() (*RepData, error) {
	m := new(RepData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloworldClient) SetStream(ctx context.Context, opts ...grpc.CallOption) (Helloworld_SetStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Helloworld_serviceDesc.Streams[1], "/helloworld.Helloworld/SetStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloworldSetStreamClient{stream}
	return x, nil
}

type Helloworld_SetStreamClient interface {
	Send(*ReqData) error
	CloseAndRecv() (*RepData, error)
	grpc.ClientStream
}

type helloworldSetStreamClient struct {
	grpc.ClientStream
}

func (x *helloworldSetStreamClient) Send(m *ReqData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloworldSetStreamClient) CloseAndRecv() (*RepData, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RepData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloworldClient) AllStream(ctx context.Context, opts ...grpc.CallOption) (Helloworld_AllStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Helloworld_serviceDesc.Streams[2], "/helloworld.Helloworld/AllStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloworldAllStreamClient{stream}
	return x, nil
}

type Helloworld_AllStreamClient interface {
	Send(*ReqData) error
	Recv() (*RepData, error)
	grpc.ClientStream
}

type helloworldAllStreamClient struct {
	grpc.ClientStream
}

func (x *helloworldAllStreamClient) Send(m *ReqData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloworldAllStreamClient) Recv() (*RepData, error) {
	m := new(RepData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloworldServer is the server API for Helloworld service.
type HelloworldServer interface {
	GetData(context.Context, *ReqData) (*RepData, error)
	GetStream(*ReqData, Helloworld_GetStreamServer) error
	SetStream(Helloworld_SetStreamServer) error
	AllStream(Helloworld_AllStreamServer) error
}

// UnimplementedHelloworldServer can be embedded to have forward compatible implementations.
type UnimplementedHelloworldServer struct {
}

func (*UnimplementedHelloworldServer) GetData(context.Context, *ReqData) (*RepData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (*UnimplementedHelloworldServer) GetStream(*ReqData, Helloworld_GetStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStream not implemented")
}
func (*UnimplementedHelloworldServer) SetStream(Helloworld_SetStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SetStream not implemented")
}
func (*UnimplementedHelloworldServer) AllStream(Helloworld_AllStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AllStream not implemented")
}

func RegisterHelloworldServer(s *grpc.Server, srv HelloworldServer) {
	s.RegisterService(&_Helloworld_serviceDesc, srv)
}

func _Helloworld_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloworldServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Helloworld/GetData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloworldServer).GetData(ctx, req.(*ReqData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Helloworld_GetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReqData)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelloworldServer).GetStream(m, &helloworldGetStreamServer{stream})
}

type Helloworld_GetStreamServer interface {
	Send(*RepData) error
	grpc.ServerStream
}

type helloworldGetStreamServer struct {
	grpc.ServerStream
}

func (x *helloworldGetStreamServer) Send(m *RepData) error {
	return x.ServerStream.SendMsg(m)
}

func _Helloworld_SetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloworldServer).SetStream(&helloworldSetStreamServer{stream})
}

type Helloworld_SetStreamServer interface {
	SendAndClose(*RepData) error
	Recv() (*ReqData, error)
	grpc.ServerStream
}

type helloworldSetStreamServer struct {
	grpc.ServerStream
}

func (x *helloworldSetStreamServer) SendAndClose(m *RepData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloworldSetStreamServer) Recv() (*ReqData, error) {
	m := new(ReqData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Helloworld_AllStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloworldServer).AllStream(&helloworldAllStreamServer{stream})
}

type Helloworld_AllStreamServer interface {
	Send(*RepData) error
	Recv() (*ReqData, error)
	grpc.ServerStream
}

type helloworldAllStreamServer struct {
	grpc.ServerStream
}

func (x *helloworldAllStreamServer) Send(m *RepData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloworldAllStreamServer) Recv() (*ReqData, error) {
	m := new(ReqData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Helloworld_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.Helloworld",
	HandlerType: (*HelloworldServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetData",
			Handler:    _Helloworld_GetData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStream",
			Handler:       _Helloworld_GetStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetStream",
			Handler:       _Helloworld_SetStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "AllStream",
			Handler:       _Helloworld_AllStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "helloworld/helloworld.proto",
}
